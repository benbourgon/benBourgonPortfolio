---
// Components
import { Image } from "astro:assets";
// Modules
import { Cloudinary } from "@cloudinary/url-gen";
import { fill } from "@cloudinary/url-gen/actions/resize";
import { focusOn, autoGravity } from "@cloudinary/url-gen/qualifiers/gravity";
import { FocusOn } from "@cloudinary/url-gen/qualifiers/focusOn";
import { format, quality } from "@cloudinary/url-gen/actions/delivery";
// Types
import type { RemoteImageProps } from "astro:assets";
// Environment variables
import { CLOUDINARY_CLOUD_NAME } from "astro:env/server";
// Local media
import imageNotFound from "@images/imageNotFoundSquare.svg";

const cld = new Cloudinary({
    cloud: {
        cloudName: CLOUDINARY_CLOUD_NAME,
    },
    url: {
        secure: true,
    },
});

type Props = RemoteImageProps & {
    type: "person" | "project";
};

const { src, alt, height, width, ...props } = Astro.props;

if (!src) {
    throw new Error("CldImage component requires a src prop.");
}
if (!width) {
    throw new Error("CldImage component requires a width prop.");
}
if (!height) {
    throw new Error("CldImage component requires a height prop.");
}
const imageNotFoundSrc = imageNotFound.src;
const image = cld.image(src);
if (props.type === "person")
    image
        .resize(fill().width(width).height(height).gravity(focusOn(FocusOn.face())))
        .delivery(format("auto"))
        .delivery(quality("auto"));
if (props.type === "project")
    image
        .format("auto")
        .resize(fill().width(width).height(height).gravity(autoGravity()))
        .delivery(format("auto"))
        .delivery(quality("auto"));
else image.resize(fill().width(width).height(height)).quality("auto");
const imgSrc = image.toURL();
---

<Image
    alt={alt ?? ""}
    width={width}
    height={height}
    loading="lazy"
    {...props}
    src={typeof imgSrc === "string" ? imgSrc : imageNotFoundSrc}
/>

<style>
    img {
        object-fit: cover;
        width: 100%;
    }
</style>
